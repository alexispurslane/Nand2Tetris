// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Not(in=instruction[15], out=Ainstruction);
	Not(in=Ainstruction, out=Cinstruction);

	// THE REGISTERS
	And(a=Cinstruction, b=instruction[5], out=ALUtoA); // If its a C-inst and the first bit of the dest is 1,
	Or(a=Ainstruction, b=ALUtoA, out=Aload); // Or if its an A-inst,
	Mux16(a=instruction, b=ALUout, sel=ALUtoA, out=ARegIn);
	ARegister(in=ARegIn, load=Aload, out=Aout, out[0..14]=addressM); // Store the ALU output or the register output
	
	And(a=Cinstruction, b=instruction[4], out=loadD);
	DRegister(in=ALUout, load=loadD, out=Dout);

	// THE ALU
	Mux16(a=Aout, b=inM, sel=instruction[12], out=Xout); // Send in the A or the M register.
	                                                     // The D register is always the second argument.
	ALU(x=Dout, y=Xout, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, zr=zrOut, ng=ngOut);
	
	Mux16(a=Aout, b=ALUout, sel=Cinstruction, out=outM, out[15]=outVal, out[0..7]=part1, out[8..15]=part2);
	And(a=Cinstruction, b=instruction[3], out=writeM);

	// THE PROGRAM COUNTER & JUMPER LOGIC

	// The jumping logic tests the conditions of each jump, then figures out which command was actually called
	// And pairs it with it's condition.
	// instruction[0] = j3
	// instruction[1] = j2
	// instruction[2] = j1
	
	Or8Way(in=part1, out=or1);
	Or8Way(in=part2, out=or2);
	Or(a=or1, b=or2, out=nonzero);
	Not(in=nonzero, out=JEQ);

	
	Not(in=outVal, out=JGT1);
	And(a=JGT1, b=nonzero, out=JGT);

	Or(a=JEQ, b=JGT, out=JGE);

	Not(in=JGE, out=JLT);

	Not(in=JEQ, out=JNE);

	Or(a=JLT, b=JEQ, out=JLE);

	Not(in=false, out=JMP);

	// Check which command it was with it's conditions met.
	And(a=instruction[0], b=JGT, out=validJGT);
	
	And(a=instruction[1], b=JEQ, out=validJEQ);
	
	And(a=instruction[1], b=instruction[0], out=j2j3);
	And(a=j2j3, b=JGE, out=validJGE);

	And(a=instruction[2], b=JLT, out=validJLT);

	And(a=instruction[2], b=instruction[0], out=j1j3);
	And(a=j1j3, b=JNE, out=validJNE);

	And(b=instruction[2], b=instruction[1], out=j1j2);
	And(a=j1j2, b=JLE, out=validJLE);

	And(a=instruction[0], b=instruction[1], out=j3j2);
	And(a=j3j2, b=instruction[2], out=validJMP);

	Or(a=validJGT, b=validJEQ, out=JGTorJEQ);
	Or(a=JGTorJEQ, b=validJGE, out=orJGE);
	Or(a=orJGE, b=validJLT, out=orJLT);
	Or(a=orJLT, b=validJNE, out=orJNE);
	Or(a=orJNE, b=validJLE, out=orJLE);
	Or(a=orJLE, b=validJMP, out=validCommands);
	And(a=validCommands, b=Cinstruction, out=shouldJump);
	
	// The Program Counter
	PC(in=Aout, reset=reset, inc=true, out[0..14]=pc, load=shouldJump); // The PC is one value behind.
	// 0 0 0 1 1 2 2 3 3
	// 0 1 1 2 2 3 3 4 4
}
